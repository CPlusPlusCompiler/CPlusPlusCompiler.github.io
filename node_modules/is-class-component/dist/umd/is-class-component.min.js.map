{"version":3,"file":"is-class-component.min.js","sources":["../../node_modules/is-it-type/dist/esm/is-it-type.js","../../src/index.js"],"sourcesContent":["/* --------------------\n * is-it-type module\n * Entry point\n * ------------------*/\n// Exports\n\n/*\n * Replication of core-util-is methods.\n * https://www.npmjs.com/package/core-util-is\n */\nfunction isArray(arg) {\n  return Array.isArray(arg);\n}\nfunction isBoolean(arg) {\n  return isType('boolean', arg);\n}\nfunction isNull(arg) {\n  return arg === null;\n}\nfunction isUndefined(arg) {\n  return arg === void 0; // eslint-disable-line no-void\n}\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nfunction isNumber(arg) {\n  return isType('number', arg);\n}\nfunction isString(arg) {\n  return isType('string', arg);\n}\nfunction isSymbol(arg) {\n  return isType('symbol', arg);\n}\nfunction isRegExp(arg) {\n  return isTypeByToString('RegExp', arg);\n}\nfunction isObject(arg) {\n  return isType('object', arg) && !isNull(arg);\n}\nfunction isDate(arg) {\n  return isTypeByToString('Date', arg);\n}\nfunction isError(arg) {\n  return isTypeByToString('Error', arg) || arg instanceof Error;\n}\nfunction isFunction(arg) {\n  return isType('function', arg);\n}\nfunction isPrimitive(arg) {\n  var type = getType(arg);\n  return arg == null || type === 'boolean' || type === 'number' || type === 'string' || type === 'symbol';\n}\n/*\n * Additional methods\n */\n// Strings\n\nfunction isEmptyString(arg) {\n  return arg === '';\n}\nfunction isFullString(arg) {\n  return isString(arg) && !isEmptyString(arg);\n} // Objects\n\nfunction isEmptyObject(arg) {\n  return isObject(arg) && Object.keys(arg).length === 0;\n} // Numbers\n\nfunction isInteger(arg) {\n  return Number.isInteger(arg);\n}\nfunction isPositiveInteger(arg) {\n  return isInteger(arg) && arg > 0;\n}\nfunction isPositiveIntegerOrZero(arg) {\n  return isInteger(arg) && arg >= 0;\n}\nfunction isNegativeInteger(arg) {\n  return isInteger(arg) && arg < 0;\n}\nfunction isNegativeIntegerOrZero(arg) {\n  return isInteger(arg) && arg <= 0;\n} // Other\n\nfunction isType(type, arg) {\n  return getType(arg) === type;\n}\n/*\n * Helpers\n */\n\nfunction getType(arg) {\n  return typeof arg;\n}\n\nvar toString = Object.prototype.toString;\n\nfunction isTypeByToString(type, arg) {\n  return toString.call(arg) === \"[object \" + type + \"]\";\n}\n\nexport { isArray, isBoolean, isDate, isEmptyObject, isEmptyString, isError, isFullString, isFunction, isInteger, isNegativeInteger, isNegativeIntegerOrZero, isNull, isNullOrUndefined, isNumber, isObject, isPositiveInteger, isPositiveIntegerOrZero, isPrimitive, isRegExp, isString, isSymbol, isType, isUndefined };\n//# sourceMappingURL=is-it-type.js.map\n","/* --------------------\n * is-class-component module\n * Entry point\n * ------------------*/\n\n// Modules\nimport {isFunction} from 'is-it-type';\n\n// Exports\n\n/**\n * Determine if input is a React class component.\n * Input must have already been checked that it's a function before calling this.\n * @param {Function} Component - Function\n * @return {boolean} - true if is a React class component\n */\nexport default function isClassComponent(input) {\n\treturn isFunction(input) && !!(input.prototype && input.prototype.isReactComponent);\n}\n"],"names":["isFunction","arg","type","getType","isType","input","prototype","isReactComponent"],"mappings":"uMA8CA,SAASA,EAAWC,GAClB,OAsCF,SAAgBC,EAAMD,GACpB,OAMF,SAAiBA,GACf,cAAcA,EAPPE,CAAQF,KAASC,EAvCjBE,CAAO,WAAYH,UC/Bb,SAA0BI,UACjCL,EAAWK,OAAaA,EAAMC,YAAaD,EAAMC,UAAUC"}