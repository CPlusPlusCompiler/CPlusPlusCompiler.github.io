{"version":3,"file":"babel.min.js","sources":["../../src/server/babel.js"],"sourcesContent":["/* --------------------\n * react-lazy-data module\n * `react-lazy-data/babel` entry point\n * Babel plugin\n * ------------------*/\n\n// Modules\nimport createId from 'babel-unique-id';\nimport {pick} from 'lodash';\nimport {isFullString} from 'is-it-type';\nimport tinyInvariant from 'tiny-invariant';\n\n// Imports\nimport {DEFAULT_CACHE_VAR} from '../shared/constants.js';\n\n// Constants\nconst PLUGIN_NAME = 'react-lazy-data/babel';\n\n// Exports\n\n// Invariant function with prefix\nconst invariant = __DEV__\n\t? (condition, message) => tinyInvariant(condition, `${PLUGIN_NAME}: ${message}`)\n\t: tinyInvariant;\n\n/**\n * Babel plugin.\n * Adds unique IDs to `createResourceFactory()` calls.\n *\n * Transforms `createResourceFactory( () => { ... } )`\n * to `createResourceFactory( () => { ... }, {id: 'PY7q4rSC'} )`.\n *\n * Also can add cache var option (if desired)\n * and remove uneccesary code where options provided are the default anyway.\n *\n * ID and cache var are not added if either `serialize: false` or `noSsr: true` option is provided.\n *\n * IDs are a hash of:\n *   1. name of package file is in\n *   2. path of file relative to package root\n *   3. counter - which increments for each call\n *\n * This should produce IDs which are unique within an application.\n *\n * @param {Object} api - Babel API\n * @param {Object} options - Options object\n * @param {string} [options.rootPath] - Root dir of package (optional)\n * @param {boolean} [isPackage=false] - `true` if is a package\n * @param {string} [options.packageName] - Package name (optional)\n * @param {string} [options.packageVersion] - Package version (optional)\n * @param {number} [options.idLength] - Length of IDs (optional)\n * @param {string} [options.cacheVar] - `cacheVar` option (optional)\n * @returns {Object} - Babel plugin\n */\nexport default function(api, options) {\n\t// Validate and conform options\n\t// NB `babel-unique-id` validates the other options\n\tlet {cacheVar} = options;\n\tinvariant(\n\t\tcacheVar === undefined || isFullString(cacheVar),\n\t\t`options.cacheVar must be a non-empty string if provided - got ${cacheVar}`\n\t);\n\t// Disregard the default as it's unnecessary\n\tif (cacheVar === DEFAULT_CACHE_VAR) cacheVar = undefined;\n\n\t// ID options\n\tconst idOptions = pick(\n\t\toptions, ['rootPath', 'isPackage', 'packageName', 'packageVersion', 'idLength']\n\t);\n\tif (__DEV__) idOptions.pluginName = PLUGIN_NAME;\n\n\t// Return plugin\n\treturn {\n\t\tvisitor: {\n\t\t\tCallExpression(path, state) {\n\t\t\t\ttransform(path, state, idOptions, cacheVar, api.types);\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * Babel transform visitor.\n * Tranforms `createResourceFactory()` function calls to add ID (and cache var if desired).\n * @param {Object} callPath - Babel path for function call\n * @param {Object} state - Babel state object\n * @param {Object} idOptions - Options to pass to `babel-unique-id`\n * @param {string} [cacheVarDefault] - `cacheVar` option (optional)\n * @param {Object} t - Babel types object\n * @returns {undefined}\n */\nfunction transform(callPath, state, idOptions, cacheVarDefault, t) {\n\t// Check is a call to `createResourceFactory()`\n\tif (!callPath.get('callee').isIdentifier({name: 'createResourceFactory'})) return;\n\n\t// Read or create options object\n\tlet optionsPath, cacheVar;\n\tif (callPath.node.arguments.length > 1) {\n\t\t// Read existing options\n\t\toptionsPath = callPath.get('arguments.1');\n\t\tconst propsPaths = getObjectProps(optionsPath);\n\t\tconst {id: idProp, serialize: serializeProp, noSsr: noSsrProp} = propsPaths;\n\t\tlet cacheVarProp = propsPaths.cacheVar;\n\n\t\t// Validate options and remove default options\n\t\tlet serialize = true,\n\t\t\tnoSsr = false;\n\t\tinvariant(\n\t\t\t!idProp || idProp.valuePath.isStringLiteral(),\n\t\t\t'`createResourceFactory()` `id` option must be a string literal if defined'\n\t\t);\n\n\t\tif (noSsrProp) {\n\t\t\tinvariant(\n\t\t\t\tnoSsrProp.valuePath.isBooleanLiteral(),\n\t\t\t\t'`createResourceFactory()` `noSsr` option must be a boolean literal if defined'\n\t\t\t);\n\t\t\tnoSsr = noSsrProp.value;\n\t\t\t// Remove `noSsr: false` as it's the default\n\t\t\tif (!noSsr) noSsrProp.propPath.remove();\n\t\t}\n\n\t\tif (serializeProp) {\n\t\t\tconst {valuePath} = serializeProp;\n\t\t\tif (valuePath.isBooleanLiteral()) {\n\t\t\t\tserialize = serializeProp.value;\n\t\t\t\t// Remove `serialize: true` as it's the default (unless no-SSR option enabled)\n\t\t\t\tif (serialize && !noSsr) serializeProp.propPath.remove();\n\t\t\t} else {\n\t\t\t\tinvariant(\n\t\t\t\t\tvaluePath.isFunctionExpression() || valuePath.isArrowFunctionExpression(),\n\t\t\t\t\t'`createResourceFactory()` `serialize` option must be a boolean or function literal'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (cacheVarProp) {\n\t\t\tinvariant(\n\t\t\t\tcacheVarProp.valuePath.isStringLiteral(),\n\t\t\t\t'`createResourceFactory()` `cacheVar` option must be a string literal if defined'\n\t\t\t);\n\n\t\t\tcacheVar = cacheVarProp.value;\n\t\t\tinvariant(\n\t\t\t\tcacheVar !== '',\n\t\t\t\t'`createResourceFactory()` `cacheVar` option must not be empty string'\n\t\t\t);\n\n\t\t\t// Remove `cacheVar: <default>` as it's the default\n\t\t\tif (cacheVar === DEFAULT_CACHE_VAR) {\n\t\t\t\tcacheVarProp.propPath.remove();\n\t\t\t\tcacheVarProp = undefined;\n\t\t\t}\n\t\t}\n\n\t\t// If serialization or server-rendering disabled, remove ID and cache var props\n\t\t// and do not add ID to options\n\t\tif (!serialize || noSsr) {\n\t\t\tif (idProp) idProp.propPath.remove();\n\t\t\tif (cacheVarProp) cacheVarProp.propPath.remove();\n\t\t\treturn;\n\t\t}\n\n\t\t// If `id` option is already defined, do not add ID to options\n\t\tif (idProp) return;\n\t} else {\n\t\t// Create options object\n\t\tconst optionsNode = t.objectExpression([]);\n\t\tcallPath.pushContainer('arguments', optionsNode);\n\t\toptionsPath = callPath.get('arguments.1');\n\t}\n\n\t// Add ID to options object\n\tconst id = createId(state, idOptions);\n\taddStringPropToObject(optionsPath, 'id', id, t);\n\n\t// Add cache var to options\n\tif (!cacheVar) {\n\t\tcacheVar = cacheVarDefault;\n\t\tif (cacheVar) addStringPropToObject(optionsPath, 'cacheVar', cacheVar, t);\n\t}\n}\n\n/**\n * Get details of all an object literal's properties.\n * Returns an object keyed by prop keys, containing objects of form\n * `{propPath, valuePath, value}`\n *\n * @param {Object} objectPath - Babel path for object\n * @returns {Object} - Object containing prop paths keyed by prop names\n */\nfunction getObjectProps(objectPath) {\n\tinvariant(\n\t\tobjectPath.isObjectExpression(),\n\t\t'`createResourceFactory()` options must be an object literal'\n\t);\n\n\tconst propsPaths = {};\n\tfor (let i = 0; i < objectPath.node.properties.length; i++) {\n\t\tconst propPath = objectPath.get(`properties.${i}`);\n\n\t\tconst keyPath = propPath.get('key');\n\t\tinvariant(\n\t\t\tkeyPath.isIdentifier(),\n\t\t\t'`createResourceFactory()` options must contain only identifiers as keys'\n\t\t);\n\n\t\tconst valuePath = propPath.get('value'),\n\t\t\t{value} = valuePath.node;\n\t\tpropsPaths[keyPath.node.name] = {propPath, valuePath, value};\n\t}\n\n\treturn propsPaths;\n}\n\n/**\n * Add string property to object.\n * @param {Object} objectPath - Babel path for object\n * @param {string} key - Object key\n * @param {string} value - Object value\n * @param {Object} t - Babel types object\n * @returns {undefined}\n */\nfunction addStringPropToObject(objectPath, key, value, t) {\n\taddPropToObject(objectPath, key, t.stringLiteral(value), t);\n}\n\n/**\n * Add property to object.\n * @param {Object} objectPath - Babel path for object\n * @param {string} key - Object key\n * @param {Object} valuePath - Babel path for value\n * @param {Object} t - Babel types object\n * @returns {undefined}\n */\nfunction addPropToObject(objectPath, key, valuePath, t) {\n\tconst propPath = t.objectProperty(t.identifier(key), valuePath);\n\tobjectPath.pushContainer('properties', propPath);\n}\n"],"names":["invariant","tinyInvariant","addStringPropToObject","objectPath","key","value","t","valuePath","propPath","objectProperty","identifier","pushContainer","addPropToObject","stringLiteral","api","options","cacheVar","undefined","isFullString","DEFAULT_CACHE_VAR","idOptions","pick","visitor","CallExpression","path","state","callPath","cacheVarDefault","get","isIdentifier","name","optionsPath","node","arguments","length","propsPaths","isObjectExpression","i","properties","keyPath","getObjectProps","id","idProp","serialize","serializeProp","noSsr","noSsrProp","cacheVarProp","isStringLiteral","isBooleanLiteral","remove","isFunctionExpression","isArrowFunctionExpression","optionsNode","objectExpression","createId","transform","types"],"mappings":"4KAqBA,MAAMA,EAEHC,EAwMH,SAASC,EAAsBC,EAAYC,EAAKC,EAAOC,IAYvD,SAAyBH,EAAYC,EAAKG,EAAWD,SAC9CE,EAAWF,EAAEG,eAAeH,EAAEI,WAAWN,GAAMG,GACrDJ,EAAWQ,cAAc,aAAcH,GAbvCI,CAAgBT,EAAYC,EAAKE,EAAEO,cAAcR,GAAQC,kBA1K3C,SAASQ,EAAKC,OAGxBC,SAACA,GAAYD,OAEHE,IAAbD,GAA0BE,EAAaF,IADxChB,MAKIgB,IAAaG,IAAmBH,OAAWC,SAGzCG,EAAYC,EACjBN,EAAS,CAAC,WAAY,YAAa,cAAe,iBAAkB,mBAK9D,CACNO,QAAS,CACRC,eAAeC,EAAMC,IAiBxB,SAAmBC,EAAUD,EAAOL,EAAWO,EAAiBrB,OAE1DoB,EAASE,IAAI,UAAUC,aAAa,CAACC,KAAM,0BAA2B,WAGvEC,EAAaf,KACbU,EAASM,KAAKC,UAAUC,OAAS,EAAG,CAEvCH,EAAcL,EAASE,IAAI,qBACrBO,EA2FR,SAAwBhC,GAEtBA,EAAWiC,sBADZpC,YAKMmC,EAAa,OACd,IAAIE,EAAI,EAAGA,EAAIlC,EAAW6B,KAAKM,WAAWJ,OAAQG,IAAK,OACrD7B,EAAWL,EAAWyB,IAAK,cAAaS,KAExCE,EAAU/B,EAASoB,IAAI,OAE5BW,EAAQV,gBADT7B,YAKMO,EAAYC,EAASoB,IAAI,UAC9BvB,MAACA,GAASE,EAAUyB,KACrBG,EAAWI,EAAQP,KAAKF,MAAQ,CAACtB,SAAAA,EAAUD,UAAAA,EAAWF,MAAAA,UAGhD8B,EAhHaK,CAAeT,IAC3BU,GAAIC,EAAQC,UAAWC,EAAeC,MAAOC,GAAaX,MAC7DY,EAAeZ,EAAWnB,SAG1B2B,GAAY,EACfE,GAAQ,KAEPH,IAAUA,EAAOnC,UAAUyC,mBAD7BhD,MAKI8C,IAEFA,EAAUvC,UAAU0C,oBADrBjD,MAIA6C,EAAQC,EAAUzC,MAEbwC,GAAOC,EAAUtC,SAAS0C,UAG5BN,EAAe,OACZrC,UAACA,GAAaqC,EAChBrC,EAAU0C,oBACbN,EAAYC,EAAcvC,MAEtBsC,IAAcE,GAAOD,EAAcpC,SAAS0C,UAG/C3C,EAAU4C,wBAA0B5C,EAAU6C,6BAD/CpD,SAOE+C,IAEFA,EAAaxC,UAAUyC,mBADxBhD,MAKAgB,EAAW+B,EAAa1C,MAEV,KAAbW,GADDhB,MAMIgB,IAAaG,IAChB4B,EAAavC,SAAS0C,SACtBH,OAAe9B,KAMZ0B,GAAaE,SACbH,GAAQA,EAAOlC,SAAS0C,cACxBH,GAAcA,EAAavC,SAAS0C,aAKrCR,EAAQ,WACN,OAEAW,EAAc/C,EAAEgD,iBAAiB,IACvC5B,EAASf,cAAc,YAAa0C,GACpCtB,EAAcL,EAASE,IAAI,qBAItBa,EAAKc,EAAS9B,EAAOL,GAC3BlB,EAAsB6B,EAAa,KAAMU,EAAInC,GAGxCU,IACJA,EAAWW,EACPX,GAAUd,EAAsB6B,EAAa,WAAYf,EAAUV,IAxGrEkD,CAAUhC,EAAMC,EAAOL,EAAWJ,EAAUF,EAAI2C"}