import { createContext } from 'react';
import { isObject, isFullString } from 'is-it-type';
import invariant from 'tiny-invariant';
import { D as DEFAULT_CACHE_VAR } from './constants.js';

/* --------------------
 * react-lazy-data module
 * Server context
 * ------------------*/

var ServerContext = createContext();

/* --------------------
 * react-lazy-data module
 * Shared functions
 * ------------------*/

var EMPTY_OBJECT = {}; // Exports

function getCacheVarFromOptionsWithValidate(options, defaultValue) {
  if (options == null) {
    options = EMPTY_OBJECT;
  } else {
    validateOptions(options);
  }

  return getCacheVarFromOptions(options, defaultValue);
}
function validateOptions(options) {
  !isObject(options) ?  invariant(false, "options must be an object if provided - got " + options)  : void 0;
}
function getCacheVarFromOptions(options, defaultValue) {
  var cacheVar = options.cacheVar;
  if (cacheVar == null) return defaultValue || DEFAULT_CACHE_VAR;
  !isFullString(cacheVar) ?  invariant(false, "options.cacheVar must be a non-empty string if provided - got " + cacheVar)  : void 0;
  return cacheVar;
}

export { ServerContext as S, getCacheVarFromOptionsWithValidate as a, getCacheVarFromOptions as g, validateOptions as v };
//# sourceMappingURL=shared.js.map
