'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var react = require('react');
var isItType = require('is-it-type');
var invariant = _interopDefault(require('tiny-invariant'));
var constants = require('./constants.js');

/* --------------------
 * react-lazy-data module
 * Server context
 * ------------------*/

var ServerContext = react.createContext();

/* --------------------
 * react-lazy-data module
 * Shared functions
 * ------------------*/

var EMPTY_OBJECT = {}; // Exports

function getCacheVarFromOptionsWithValidate(options, defaultValue) {
  if (options == null) {
    options = EMPTY_OBJECT;
  } else {
    validateOptions(options);
  }

  return getCacheVarFromOptions(options, defaultValue);
}
function validateOptions(options) {
  !isItType.isObject(options) ?  invariant(false, "options must be an object if provided - got " + options)  : void 0;
}
function getCacheVarFromOptions(options, defaultValue) {
  var cacheVar = options.cacheVar;
  if (cacheVar == null) return defaultValue || constants.DEFAULT_CACHE_VAR;
  !isItType.isFullString(cacheVar) ?  invariant(false, "options.cacheVar must be a non-empty string if provided - got " + cacheVar)  : void 0;
  return cacheVar;
}

exports.ServerContext = ServerContext;
exports.getCacheVarFromOptions = getCacheVarFromOptions;
exports.getCacheVarFromOptionsWithValidate = getCacheVarFromOptionsWithValidate;
exports.validateOptions = validateOptions;
//# sourceMappingURL=shared.js.map
