{"version":3,"file":"index.min.js","sources":["../../src/client/resource.js","../../src/client/createResourceFactory.js","../../src/client/isResource.js","../../src/client/withResources.js","../../src/client/preloadData.js"],"sourcesContent":["/* --------------------\n * react-lazy-data module\n * Resource class\n * ------------------*/\n\n// Modules\nimport {NO_SSR, ABORT, ON_MOUNT} from 'react-async-ssr/symbols';\nimport isPromise from 'is-promise';\nimport {isFunction} from 'is-it-type';\nimport invariant from 'tiny-invariant';\n\n// Imports\nimport {IS_RESOURCE} from '../shared/constants.js';\n\n// Constants\n// Load status\nconst INACTIVE = 0,\n\tLOADING = 1,\n\tLOADED = 2,\n\tERRORED = 3,\n\tABORTED = 4;\n\n// Read status\nconst NONE_CALLED = 0,\n\tREAD_CALLED = 1,\n\tCHILD_CALLED = 2;\n\n// Valid prop types\nconst PROP_TYPES = ['string', 'number', 'symbol'];\n\n// Exports\n\nexport default class Resource {\n\tconstructor(factory, req, cacheKey, context, parent) {\n\t\tthis._factory = factory;\n\t\tthis._req = req;\n\t\tthis._cacheKey = cacheKey;\n\t\tthis._context = context;\n\t\tthis._parent = parent;\n\n\t\tthis._status = parent ? LOADING : INACTIVE;\n\t\tthis._readStatus = NONE_CALLED;\n\t\tthis._isDisposed = false;\n\t\tthis._abort = undefined;\n\t\tthis._children = [];\n\t\tthis._numUndisposedChildren = 0;\n\n\t\t// Create promise\n\t\t// Could make this a thenable which calls `.then()` callbacks synchronously\n\t\t// when `this._resolve()` called, to avoid an extra tick,\n\t\t// but I don't think it's worth the code bloat to save a microtick.\n\t\tconst promise = new Promise((resolve) => {\n\t\t\tthis._resolve = resolve;\n\t\t});\n\n\t\tpromise[ABORT] = this.dispose.bind(this);\n\t\tpromise[ON_MOUNT] = this._mounted.bind(this);\n\t\tif (factory._noSsr) promise[NO_SSR] = true;\n\n\t\tthis._value = promise;\n\t}\n\n\t_load() {\n\t\t// Pass to parent if exists\n\t\tconst parent = this._parent;\n\t\tif (parent) {\n\t\t\tparent._load();\n\t\t\treturn;\n\t\t}\n\n\t\t// Do not load if already loading or aborted\n\t\tif (this._status !== INACTIVE) return;\n\n\t\t// Execute fetch function\n\t\t// TODO Catch synchronously thrown errors in `fetchFn()`\n\t\tconst fetchFn = this._factory._fetchFn;\n\t\tconst promise = fetchFn(this._req);\n\t\tinvariant(isPromise(promise), `Fetch function must return a promise - got ${promise}`);\n\n\t\t// Set loading status\n\t\tthis._status = LOADING;\n\n\t\t// Record promise's abort handler if defined\n\t\tconst {abort} = promise;\n\t\tif (isFunction(abort)) this._abort = abort.bind(promise);\n\n\t\t// Update status when promise resolves\n\t\tpromise.then(\n\t\t\tres => this._resolved(res),\n\t\t\terr => this._rejected(err)\n\t\t);\n\t}\n\n\t_resolved(value) {\n\t\tif (this._status !== LOADING) return;\n\n\t\tthis._resolvedThis(value);\n\n\t\tfor (const {child, prop} of this._children) {\n\t\t\tthis._resolveChild(child, prop);\n\t\t}\n\t}\n\n\t_resolvedThis(value) {\n\t\tthis._status = LOADED;\n\t\tthis._value = value;\n\t\tthis._abort = undefined;\n\t\tthis._resolve();\n\t}\n\n\t_resolveChild(child, prop) {\n\t\tlet value = this._value;\n\n\t\tif (prop !== undefined) {\n\t\t\ttry {\n\t\t\t\tvalue = value[prop];\n\t\t\t} catch (err) {\n\t\t\t\tchild._rejected(err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tchild._resolved(value);\n\t}\n\n\t_rejected(err) {\n\t\tif (this._status !== LOADING) return;\n\n\t\tthis._status = ERRORED;\n\t\tthis._value = err;\n\t\tthis._abort = undefined;\n\t\tthis._resolve();\n\n\t\tfor (const {child} of this._children) {\n\t\t\tchild._rejected(err);\n\t\t}\n\t}\n\n\tread() {\n\t\tthis._validateReadStatus(READ_CALLED);\n\n\t\tif (this._status === LOADED) return this._value;\n\t\tthrow this._value;\n\t}\n\n\tdispose() {\n\t\tif (this._isDisposed) return;\n\t\tthis._isDisposed = true;\n\n\t\tconst parent = this._parent;\n\t\tif (parent) {\n\t\t\tparent._disposeFromChild();\n\t\t} else {\n\t\t\tif ([INACTIVE, LOADING].includes(this._status)) {\n\t\t\t\tthis._status = ABORTED;\n\n\t\t\t\tconst abort = this._abort;\n\t\t\t\tif (abort) {\n\t\t\t\t\tthis._abort = undefined;\n\t\t\t\t\tabort();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst cacheKey = this._cacheKey;\n\t\t\tif (cacheKey !== undefined) this._factory._clearCacheEntry(cacheKey);\n\t\t}\n\t}\n\n\tchild(prop) {\n\t\tinvariant(\n\t\t\tPROP_TYPES.includes(typeof prop),\n\t\t\t`.child() must be passed a string, number or symbol - received ${prop}`\n\t\t);\n\n\t\treturn this._child(prop);\n\t}\n\n\tclone() {\n\t\treturn this._child();\n\t}\n\n\t_child(prop) {\n\t\treturn this._childWithContext(prop, this._context);\n\t}\n\n\t_childWithContext(prop, context) {\n\t\tthis._validateReadStatus(CHILD_CALLED);\n\n\t\tconst child = new Resource(this._factory, this._req, this._cacheKey, context, this);\n\n\t\tconst status = this._status;\n\t\tif (status === LOADED) {\n\t\t\tthis._resolveChild(child, prop);\n\t\t} else if (status === ERRORED) {\n\t\t\tchild._rejected(this._value);\n\t\t}\n\n\t\tthis._children.push({child, prop});\n\t\tthis._numUndisposedChildren++;\n\t\treturn child;\n\t}\n\n\t_disposeFromChild() {\n\t\tthis._numUndisposedChildren--;\n\t\tif (this._numUndisposedChildren === 0) this.dispose();\n\t}\n\n\t_validateReadStatus(newReadStatus) {\n\t\tconst readStatus = this._readStatus;\n\t\tif (readStatus === NONE_CALLED) {\n\t\t\tthis._readStatus = newReadStatus;\n\t\t} else if (readStatus !== newReadStatus) {\n\t\t\tinvariant(false, 'Cannot call both .read() and .child() / .clone() on a resource');\n\t\t}\n\t}\n\n\t_mounted(willRender) {\n\t\tconst context = this._context;\n\t\tif (context) context.register(this, willRender);\n\t}\n\n\tget isLoading() {\n\t\treturn [INACTIVE, LOADING, ABORTED].includes(this._status);\n\t}\n\n\tget isLoaded() {\n\t\treturn this._status === LOADED;\n\t}\n\n\tget isErrored() {\n\t\treturn this._status === ERRORED;\n\t}\n}\n\nResource.prototype[IS_RESOURCE] = true;\n","/* --------------------\n * react-lazy-data module\n * `createResourceFactory()` function\n * ------------------*/\n\n// Modules\nimport {useRef, useEffect, useContext} from 'react';\nimport {isFunction, isString, isFullString, isBoolean} from 'is-it-type';\nimport invariant from 'tiny-invariant';\n\n// Imports\nimport Resource from './resource.js';\nimport ServerContext from '../shared/serverContext.js';\nimport {validateOptions, getCacheVarFromOptions} from '../shared/shared.js';\n\n// Constants\nconst IS_NODE = typeof window === 'undefined';\n\n// Exports\n\nclass ResourceFactory {\n\tconstructor(fetchFn, options) {\n\t\tthis._fetchFn = fetchFn;\n\n\t\t// Validate and conform options\n\t\tlet id, serialize, noSsr, cacheVar;\n\t\tif (options != null) {\n\t\t\tvalidateOptions(options);\n\n\t\t\t({id, serialize, noSsr} = options);\n\n\t\t\t// Validate and conform `id` option\n\t\t\tif (id == null) {\n\t\t\t\tid = undefined;\n\t\t\t} else {\n\t\t\t\tinvariant(\n\t\t\t\t\tisFullString(id),\n\t\t\t\t\t`options.id must be a non-empty string if provided - got ${id}`\n\t\t\t\t);\n\n\t\t\t\t// Using global cache implies serialization\n\t\t\t\tif (serialize == null) {\n\t\t\t\t\tserialize = true;\n\t\t\t\t} else {\n\t\t\t\t\tinvariant(\n\t\t\t\t\t\tserialize !== false,\n\t\t\t\t\t\t'serialization cannot be disabled when using global cache'\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Get cache var from options (use default cache var if not provided)\n\t\t\t\tcacheVar = getCacheVarFromOptions(options);\n\t\t\t}\n\n\t\t\t// Validate and conform `serialize` option\n\t\t\tif (serialize == null || serialize === false) {\n\t\t\t\tserialize = undefined;\n\t\t\t} else if (serialize === true) {\n\t\t\t\tserialize = JSON.stringify;\n\t\t\t} else {\n\t\t\t\tinvariant(\n\t\t\t\t\tisFunction(serialize),\n\t\t\t\t\t`options.serialize must be a function or boolean if provided - got ${serialize}`\n\t\t\t\t);\n\t\t\t\tserialize = wrapSerializer(serialize);\n\t\t\t}\n\n\t\t\tinvariant(\n\t\t\t\t!IS_NODE || !serialize || id,\n\t\t\t\t'If using caching on server side, must also provide options.id'\n\t\t\t);\n\n\t\t\t// Validate and conform `noSsr` option\n\t\t\tif (noSsr == null) {\n\t\t\t\tnoSsr = false;\n\t\t\t} else {\n\t\t\t\tinvariant(\n\t\t\t\t\tisBoolean(noSsr),\n\t\t\t\t\t`options.noSsr must be a boolean if provided - got ${noSsr}`\n\t\t\t\t);\n\n\t\t\t\t// No-SSR mode is only enabled on server side\n\t\t\t\tif (!IS_NODE) noSsr = false;\n\t\t\t}\n\t\t} else {\n\t\t\tnoSsr = false;\n\t\t}\n\n\t\tthis._id = id;\n\t\tthis._serialize = serialize;\n\t\tthis._noSsr = noSsr;\n\t\tthis._cacheVar = cacheVar;\n\n\t\t// Init cache\n\t\t// Cache cannot be stored on factory in SSR as the factory is static across different\n\t\t// renders, so data would cross between renders. So it is stored in context instead\n\t\t// when rendering on server side.\n\t\tif (IS_NODE) {\n\t\t\tthis._cache = undefined;\n\t\t\tthis._needContext = !!serialize;\n\t\t} else {\n\t\t\tthis._cache = serialize ? {} : undefined;\n\t\t\tthis._needContext = false;\n\t\t}\n\t}\n\n\tcreate(req) {\n\t\tinvariant(!this._needContext, '`.create` cannot be used on server side with caching enabled');\n\t\treturn this._create(req);\n\t}\n\n\t_create(req, context) {\n\t\tconst resource = this._getResource(req, undefined, context);\n\n\t\t// Load resource immediately\n\t\t// (unless in no-SSR mode, in which case leave it pending forever)\n\t\tif (!this._noSsr) resource._load();\n\n\t\treturn resource;\n\t}\n\n\tuse(req) {\n\t\t// If server-side render, load immediately with context\n\t\tif (IS_NODE) {\n\t\t\tconst context = useContext(ServerContext);\n\t\t\tinvariant(\n\t\t\t\tcontext || !this._needContext,\n\t\t\t\t'Application must be wrapped in a `DataExtractorManager` when using caching on server side'\n\t\t\t);\n\t\t\treturn this._create(req, context);\n\t\t}\n\n\t\t// If no existing resource or req has changed, create one\n\t\tconst resourceRef = useRef();\n\n\t\tlet resource = resourceRef.current;\n\t\tif (!resource || req !== resource._req) {\n\t\t\t// TODO Add `if (resource) resource.dispose();` here to abort faster?\n\t\t\tresource = this._getResource(req, resource);\n\t\t\tresourceRef.current = resource;\n\t\t}\n\n\t\t// On mount, load data\n\t\tuseEffect(() => {\n\t\t\tresource._load();\n\n\t\t\t// On unmount, dispose resource\n\t\t\treturn () => resource.dispose();\n\t\t}, [resource]);\n\n\t\t// Return resource\n\t\treturn resource;\n\t}\n\n\t_getResource(req, previousResource, context) {\n\t\t// If no cache, create new resource without caching\n\t\tconst serialize = this._serialize;\n\t\tif (!serialize) return new Resource(this, req, undefined, context);\n\n\t\t// Serialize request\n\t\tconst cacheKey = serialize(req);\n\n\t\t// If serialized request has not changed, return previous resource\n\t\tif (previousResource && previousResource._cacheKey === cacheKey) return previousResource;\n\n\t\t// Get existing resource from cache\n\t\t// Cache is either in factory or (on server side) in context\n\t\tconst cache = context ? context.getCache(this) : this._cache;\n\t\tlet masterResource = cache[cacheKey];\n\n\t\t// If not found in cache, create resource and add to cache\n\t\tif (!masterResource) {\n\t\t\t// Create new resource\n\t\t\tmasterResource = new Resource(this, req, cacheKey);\n\n\t\t\t// Get data from global cache\n\t\t\tthis._populateFromGlobalCache(masterResource, cacheKey);\n\n\t\t\t// Save resource to local cache\n\t\t\tcache[cacheKey] = masterResource;\n\t\t}\n\n\t\t// Return clone of master resource\n\t\treturn masterResource._childWithContext(undefined, context);\n\t}\n\n\t_clearCacheEntry(cacheKey) {\n\t\tif (this._cache) delete this._cache[cacheKey];\n\t}\n\n\t/**\n\t * Get data from global cache and resolve resource with it.\n\t *\n\t * The global cache is one shot - values are consumed from it, and then removed from\n\t * the cache. So next time the same request is made, it will async fetch fresh data.\n\t * Global cache is intended for SSR hyration. At the end of hydration, the cache should\n\t * be empty.\n\t *\n\t * @param {Object} resource - Resource to populate with data if found in cache\n\t * @param {string} cacheKey - Request cache key\n\t * @returns {undefined}\n\t */\n\t_populateFromGlobalCache(resource, cacheKey) {\n\t\t// Global cache only works on client-side\n\t\tif (IS_NODE) return;\n\n\t\t// If no factory ID, does not use global cache\n\t\tconst id = this._id;\n\t\tif (!id) return;\n\n\t\t// Get global cache\n\t\tconst globalCacheContainer = window[this._cacheVar];\n\t\tif (!globalCacheContainer) return;\n\t\tconst globalCache = globalCacheContainer.data;\n\t\tif (!globalCache) return;\n\n\t\t// Get data cache for this factory\n\t\tconst valuesCache = globalCache[id];\n\t\tif (!valuesCache) return;\n\n\t\t// Get data cached for this request\n\t\t// NB `.hasOwnProperty()` is safe here as we know the cache object is a plain JS object\n\t\tif (!valuesCache.hasOwnProperty(cacheKey)) return; // eslint-disable-line no-prototype-builtins\n\t\tconst value = valuesCache[cacheKey];\n\n\t\t// Delete from global cache\n\t\tdelete valuesCache[cacheKey];\n\t\tif (Object.keys(valuesCache).length === 0) delete globalCache[id];\n\n\t\t// Resolve resource with cached data\n\t\tresource._resolvedThis(value);\n\t}\n}\n\nexport default function createResourceFactory(fetchFn, options) {\n\treturn new ResourceFactory(fetchFn, options);\n}\n\n/*\n * Helper functions\n */\nfunction wrapSerializer(serialize) {\n\treturn (req) => {\n\t\tconst cacheKey = serialize(req);\n\t\tinvariant(isString(cacheKey), `serialize() must return a string - got ${cacheKey}`);\n\t\treturn cacheKey;\n\t};\n}\n","/* --------------------\n * react-lazy-data module\n * `isResource()` function\n * ------------------*/\n\n// Modules\nimport {isFunction} from 'is-it-type';\n\n// Imports\nimport {IS_RESOURCE} from '../shared/constants.js';\n\n// Exports\n\nexport default function isResource(value) {\n\treturn value != null && !!value[IS_RESOURCE] && isFunction(value.read);\n}\n","/* --------------------\n * react-lazy-data module\n * `withResources()` function\n * ------------------*/\n\n// Modules\nimport {createElement} from 'react';\nimport {isFunction} from 'is-it-type';\nimport isClassComponent from 'is-class-component';\nimport invariant from 'tiny-invariant';\n\n// Imports\nimport isResource from './isResource.js';\n\n// Exports\n\nexport default function withResources(Component) {\n\tinvariant(\n\t\tisFunction(Component),\n\t\t`withResources() must be passed a React component - got ${Component}`\n\t);\n\n\tconst ComponentWithResources = isClassComponent(Component)\n\t\t? wrapClassComponent(Component)\n\t\t: wrapFunctionComponent(Component);\n\n\tObject.assign(ComponentWithResources, Component);\n\tComponentWithResources.displayName = `withResources(${Component.displayName || Component.name || ''})`;\n\treturn ComponentWithResources;\n}\n\nfunction wrapFunctionComponent(Component) {\n\treturn function(props, ...otherArgs) {\n\t\tprops = processProps(props);\n\t\treturn Component.call(this, props, ...otherArgs); // eslint-disable-line no-invalid-this\n\t};\n}\n\nfunction wrapClassComponent(Component) {\n\treturn (props) => {\n\t\tprops = processProps(props);\n\t\treturn createElement(Component, props);\n\t};\n}\n\nfunction processProps(props) {\n\tprops = {...props};\n\n\tfor (const key in props) {\n\t\tconst value = props[key];\n\t\tif (isResource(value)) props[key] = value.read();\n\t}\n\n\treturn props;\n}\n","/* --------------------\n * react-lazy-data module\n * `preloadData()` function\n * ------------------*/\n\n// Imports\nimport {getCacheVarFromOptionsWithValidate} from '../shared/shared.js';\n\n// Exports\n\nexport default function preloadData(options) {\n\treturn new Promise((resolve) => {\n\t\t// Get cache var from options\n\t\t// NB This is inside promise so function never synchronously throws\n\t\tconst cacheVar = getCacheVarFromOptionsWithValidate(options);\n\n\t\tlet cacheContainer = window[cacheVar];\n\n\t\t// If data already present, resolve\n\t\tif (cacheContainer) {\n\t\t\tresolve(cacheContainer.data);\n\t\t\treturn;\n\t\t}\n\n\t\t// Set up trap to catch when data is written.\n\t\t// When it is, resolve promise.\n\t\tcacheContainer = Object.create(null, {\n\t\t\tdata: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tset(data) {\n\t\t\t\t\tObject.defineProperty(cacheContainer, 'data', {value: data});\n\t\t\t\t\tresolve(data);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\twindow[cacheVar] = cacheContainer;\n\t});\n}\n"],"names":["INACTIVE","LOADING","ABORTED","PROP_TYPES","Resource","factory","req","cacheKey","context","parent","_factory","_req","_cacheKey","_context","_parent","_status","_readStatus","_isDisposed","_abort","undefined","_children","_numUndisposedChildren","promise","Promise","resolve","_this","_resolve","ABORT","this","dispose","bind","ON_MOUNT","_mounted","_noSsr","NO_SSR","_value","_load","fetchFn","_fetchFn","isPromise","invariant","abort","isFunction","then","res","_this2","_resolved","err","_rejected","value","_resolvedThis","child","prop","_resolveChild","read","_validateReadStatus","_disposeFromChild","includes","_clearCacheEntry","_child","clone","_childWithContext","status","push","newReadStatus","readStatus","willRender","register","prototype","IS_RESOURCE","IS_NODE","window","ResourceFactory","options","id","serialize","noSsr","cacheVar","validateOptions","isFullString","getCacheVarFromOptions","JSON","stringify","isString","wrapSerializer","isBoolean","_id","_serialize","_cacheVar","_cache","_needContext","create","_create","resource","_getResource","use","useContext","ServerContext","resourceRef","useRef","current","useEffect","previousResource","cache","getCache","masterResource","_populateFromGlobalCache","globalCacheContainer","globalCache","data","valuesCache","hasOwnProperty","Object","keys","length","isResource","processProps","props","key","getCacheVarFromOptionsWithValidate","cacheContainer","configurable","set","defineProperty","Component","ComponentWithResources","isClassComponent","createElement","wrapClassComponent","otherArgs","call","wrapFunctionComponent","assign","displayName","name"],"mappings":"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"}